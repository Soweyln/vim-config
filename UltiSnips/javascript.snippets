snippet ap "Add property: `key: value,`" b
$1: $0,
endsnippet

snippet ao "Add property: `key: {},`" b
$1: {
  $0
},
endsnippet

snippet af "Add function: `fun() {}`"
$1($2) {
  $0
}
endsnippet

snippet as "Add component in string interpolation" i
${$1}$0
endsnippet

snippet ir "Import react"
import React from 'react';

endsnippet

snippet irt "Import react type"
import type {$1} from 'react';
endsnippet

snippet irxc "Import react-redux connect"
import {connect} from 'react-redux';
endsnippet

snippet irxt "Import react-redux type"
import type {${1:MapDispatchToProps}${2:, MapStateToProps}} from 'react-redux';
endsnippet

snippet cls "React class"
class $1 extends React.Component {
  render() {
  }
}
endsnippet

snippet aff "Add arrow function: `() => {}`"
${1:()} => {
  $0
}
endsnippet

snippet afe "Add arrow function express: `a = () => {}`"
$1 = ${2:()} => {
  $0
}
endsnippet

snippet exp "Add export: `export const module = {};`"
export const $1 = {
  $0
};
endsnippet

snippet co "Add destructure: `const {a} = obj;`" b
const {$1} = $0;
endsnippet

snippet ty "Add type: `type a = {};`"
type $1 = {$0};
endsnippet

snippet fa "Add fat arrow: `() => ;`"
() => $0
endsnippet

snippet it "it (jest)"
it('${1:description}', () => {
  $0
});
endsnippet

snippet des "describe (jest)"
describe('${1:description}', () => {
  $0
});
endsnippet

snippet bef "beforeEach (jest)"
beforeEach(() => {
  $0
});
endsnippet

snippet aft "afterEach (jest)"
afterEach(() => {
  $0
});
endsnippet

snippet befa "beforeAll (jest)"
beforeAll(() => {
  $0
});
endsnippet

snippet afta "afterAll (jest)"
afterAll(() => {
  $0
});
endsnippet

snippet cld "console.log(*.debug()) (jest)"
console.log($0.debug());
endsnippet

snippet exps "Expect to match snapshot"
expect(${0:component}).toMatchSnapshot();
endsnippet
