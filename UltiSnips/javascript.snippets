snippet ap "Add property: `key: value,`" b
$1: $0,
endsnippet

snippet ao "Add object property: `key: {},`" b
$1: {
  $0
},
endsnippet

snippet af "Add function: `fun() {}`"
$1($2) {
  $0
}
endsnippet

snippet as "Add component in string interpolation" i
${$1}$0
endsnippet

snippet ir "Import react"
import React from 'react';

endsnippet

snippet irt "Import react type"
import type {$1} from 'react';
endsnippet

snippet irxc "Import react-redux connect"
import {connect} from 'react-redux';
endsnippet

snippet aff "Add arrow function: `() => {}`"
${1:()} => {
  $0
}
endsnippet

snippet afe "Add arrow function express: `a = () => {}`"
$1 = ${2:()} => {
  $0
}
endsnippet

snippet ec "Add export const: `export const module = {};`" b
export const $0
endsnippet

snippet ef "Add export function: `export function () {};`" b
export function $1() {
  $0
};
endsnippet

snippet co "Add destructure: `const {a} = obj;`" b
const {$1} = ${0:this.props};
endsnippet

snippet fo "Add flow object: `type a = {};`" b
type $1 = {$0};
endsnippet

snippet fp "Add flow for Props" b
type OwnProps = {|
  $1
|};
type Props = {|
  ...OwnProps,
  $0
|};
endsnippet

snippet nc "New react class component" b
// @flow
import React from 'react';

type Props = {|
|};

${1:export }class ${2:`!v util#GetBaseFileName()`} extends React.Component<Props> {
  return (
    $0
  );
}
endsnippet

snippet nf "New react functional component" b
// @flow
import React from 'react';

type Props = {|
|};

${1:export }function ${2:`!v util#GetBaseFileName()`}(${3:props: Props}) {
  return (
    $0
  );
}
endsnippet

snippet nt "New react component test with enzyme" b
// @flow
import {shallow} from 'enzyme';
import React from 'react';

import {${1:`!v util#GetBaseFileName()`}} from './`!v util#GetBaseFileName()`';

const defaultProps = {
};

describe('$1', () => {
  it('renders', () => {
    const component = shallow(<$1 {...defaultProps} />);
    expect(component).toMatchSnapshot();
  });
});
endsnippet

snippet ntf "New react component test with factory" b
// @flow
import {factoryShallow} from 'javascript/oscar-test-utils/factory';

import {${1:`!v util#GetBaseFileName()`}} from './`!v util#GetBaseFileName()`';

const defaultProps = {
};

describe('$1', () => {
  it('renders', () => {
    const {component} = factoryShallow($1, defaultProps);
    expect(component).toMatchSnapshot();
  });
});
endsnippet

snippet fs "Factory shallow render"
const {component} = factoryShallow(${1:`!v util#GetBaseFileName()`}, defaultProps, {
  $2: $3,
});
expect(component$4).toMatchSnapshot();
endsnippet

snippet fm "Factory mount render"
const {component} = factoryMount(${1:`!v util#GetBaseFileName()`}, defaultProps, {
  $2: $3,
});
expect(component).toMatchSnapshot();
endsnippet

snippet iri "Import react-intl"
import {${1:FormattedMessage}} from 'react-intl';
endsnippet

snippet afm "Add FormattedMessage"
<FormattedMessage
  defaultMessage="${1}"
  description="${2}"
  id="${3}"
/>
endsnippet

snippet it "it (jest)"
it('${1:description}', () => {
  $0
});
endsnippet

snippet des "describe (jest)"
describe('${1:description}', () => {
  $0
});
endsnippet

snippet bef "beforeEach (jest)"
beforeEach(() => {
  $0
});
endsnippet

snippet aft "afterEach (jest)"
afterEach(() => {
  $0
});
endsnippet

snippet befa "beforeAll (jest)"
beforeAll(() => {
  $0
});
endsnippet

snippet afta "afterAll (jest)"
afterAll(() => {
  $0
});
endsnippet

snippet cld "console.log(*.debug()) (jest)"
console.log($0.debug());
endsnippet

snippet exps "Expect to match snapshot"
expect(${0:component}).toMatchSnapshot();
endsnippet
